
==================== FINAL INTERFACE ====================
2017-10-26 06:32:58.426512 UTC

interface main@main:Main 8002
  interface hash: b3621334cb3111f29ea41df976ace797
  ABI hash: 42f4d5d2e6084450a332fcdd4a9e4603
  export-list hash: c7f1c1cba8a8a26d93d7d9543a2ef054
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f58b9bf178893249de22598ef7aef233
  sig of: Nothing
  used TH splices: True
  where
exports:
  Main.accountNum
  Main.addTransaction
  Main.amount
  Main.category
  Main.change'
  Main.clearFile
  Main.clearingFile
  Main.colorTrans
  Main.cols
  Main.continue
  Main.delete
  Main.deleteLine
  Main.description
  Main.editTransaction
  Main.file
  Main.formatHeaders
  Main.formatTransactionOutput
  Main.getDest
  Main.getIncome
  Main.getSum
  Main.getTransactionRecords
  Main.getVals
  Main.headers
  Main.main
  Main.match'
  Main.mergeData'
  Main.names
  Main.nextMove
  Main.routeEditTransaction
  Main.routingNumber
  Main.sec
  Main.sortIt
  Main.uid
  Main.update
  Main.updateFile
  Main.updatedAt
  Main.user
  Main.Transaction{Main.Transaction _accountNum _amount _category _description _routingNumber _uid _updatedAt _user}
module dependencies:
package dependencies: StateVar-1.1.0.4@StateVar-1.1.0.4-5dJbnTVECtEAhfJXPZKdbO
                      adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0
                      base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu
                      bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      comonad-5.0.2@comonad-5.0.2-Fq9Xy9jdx6uIyJZn00E6Yc
                      containers-0.5.7.1@containers-0.5.7.1
                      contravariant-1.4@contravariant-1.4-29zF0Im431177ovfbHYCGv
                      deepseq-1.4.2.0@deepseq-1.4.2.0 directory-1.3.0.0@directory-1.3.0.0
                      distributive-0.5.3@distributive-0.5.3-IX4kyVcHAyoH4uFYrsjY1R
                      exceptions-0.8.3@exceptions-0.8.3-ADEDRATtUrMK1JW4zMQ9U
                      filepath-1.4.1.1@filepath-1.4.1.1
                      free-4.12.4@free-4.12.4-C2gBQV0m8J42HxqSLTFyVx
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      integer-gmp-1.0.0.1
                      kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX
                      lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW
                      mtl-2.2.1@mtl-2.2.1-BLKBelFsPB3BoFeSWSOYj6
                      old-locale-1.0.0.7@old-locale-1.0.0.7-KGBP1BSKxH5GCm0LnZP04j
                      old-time-1.1.0.3@old-time-1.1.0.3-KWRsMSdY26c2L27Y9n9cyq
                      prelude-extras-0.4.0.3@prelude-extras-0.4.0.3-BhL9U5k7NtGJn1itwIHt2Y
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT
                      reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4
                      semigroupoids-5.2.1@semigroupoids-5.2.1-Db8txM8kTsI6Y49CY6g5Jn
                      split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT
                      stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      terminal-size-0.3.2.1@terminal-size-0.3.2.1-LL700oIgYTEEtJWQuzY2Y4
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ
                      time-1.6.0.1@time-1.6.0.1
                      transaction-0.1.0.0@transaction-0.1.0.0-8uOaLxsteoo80COzXKWxl
                      transformers-0.5.2.0@transformers-0.5.2.0
                      transformers-compat-0.5.1.4@transformers-compat-0.5.1.4-IuFogs8HAVUJBWVNMhtssu
                      unix-2.7.2.1@unix-2.7.2.1
                      unix-time-0.3.7@unix-time-0.3.7-EhnEKT4D7hJajV74Sk5BE
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         base-orphans-0.6@base-orphans-0.6-AbJ3lKVXygDCG0eeQEv8Iu:Data.Orphans
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         reflection-2.1.2@reflection-2.1.2-Bem12O1xFGSHr4C2Hyu1c4:Data.Reflection
         stm-2.4.4.1@stm-2.4.4.1-JQn4hNPyYjP5m9AcbI88Ve:Control.Monad.STM
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         unix-time-0.3.7@unix-time-0.3.7-EhnEKT4D7hJajV74Sk5BE:Data.UnixTime.Diff
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: adjunctions-4.3@adjunctions-4.3-A5jfd1yrmaY4DRMJuiquBp:Data.Functor.Rep
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Biff
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Clown
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Fix
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Flip
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Join
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Joker
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Product
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Sum
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Tannen
                         bifunctors-5.4.2@bifunctors-5.4.2-KcF2f75KyQm5BjgJ8WkHCw:Data.Bifunctor.Wrapped
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Day
                         kan-extensions-5.0.2@kan-extensions-5.0.2-8LTJJ1zQJWB7SfewWXUuqX:Data.Functor.Yoneda
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.At
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Internal.Indexed
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Reified
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Tuple
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Wrapped
                         lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Zoom
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         profunctors-5.2.1@profunctors-5.2.1-Ga89Nyw0d7LBEIoX4AZ6gT:Data.Profunctor.Rep
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         terminal-size-0.3.2.1@terminal-size-0.3.2.1-LL700oIgYTEEtJWQuzY2Y4:System.Console.Terminal.Common
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         th-abstraction-0.2.6.0@th-abstraction-0.2.6.0-HRFJgpoqs5HJ5LgHnjmMhQ:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB:System.Console.ANSI 6f9e98afbd24fbb5fc7a0ee1d84164e5
import  -/  ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB:System.Console.ANSI.Types 26697b38c6e3b87a83080404e7fdcd6d
import  -/  ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB:System.Console.ANSI.Unix 9653fb52be761a95ef20e1d8202d38e9
import  -/  base-4.9.1.0:Control.Concurrent 2ee6a0a58489520b9a96d8fef10380fa
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Bits d707ac81dd0124c7a7fb3234df2c8548
import  -/  base-4.9.1.0:Data.Char 01433d23661edb6e5ef1536ef1e6774c
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.Maybe d876c4ffe4b3c43755a781e8ad860d88
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:Data.Traversable 556020d7cf3c4a34a774600512918a37
import  -/  base-4.9.1.0:Data.Tuple 7dc4bbb45d2e69c991ffac438beeca11
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:GHC.Unicode a175ecf20bf1272d9ae31337e7da43ab
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.ParserCombinators.ReadPrec 5a182a8d6deb0f7d67aed5fab08a5cc0
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  base-4.9.1.0:Text.Read.Lex 16199fac3c6c2d64cc7c268f3c0d2269
import  -/  directory-1.3.0.0@directory-1.3.0.0:System.Directory 23e4e3d52f91c33b21f0667cd90aa164
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens 51c282815697462fb4c0814abcb89573
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Setter 2ba84291b39c66d4fb563b9eaed1d93d
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.TH ee2327b22bd8e33159fe319d450ee351
import  -/  lens-4.15.4@lens-4.15.4-Km66e7WFRbEC7HnDdV2JDW:Control.Lens.Type 69935f8f37896297f57e4a0c66e745a8
import  -/  split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT:Data.List.Split 272c5cfa667e04d85d90f02a3d135474
import  -/  split-0.2.3.2@split-0.2.3.2-CJl40zTyCIV16Pr60nb7CT:Data.List.Split.Internals be3228c161b442fb4a76d9ed8518c1ed
import  -/  template-haskell-2.11.1.0:Language.Haskell.TH d856a1f9d606be57026da48a46c8b0a9
import  -/  terminal-size-0.3.2.1@terminal-size-0.3.2.1-LL700oIgYTEEtJWQuzY2Y4:System.Console.Terminal.Size 91c3153dec9932a7771303a1241cd66b
import  -/  transaction-0.1.0.0@transaction-0.1.0.0-8uOaLxsteoo80COzXKWxl:CRUD 0a60c62733a82c5cf525e25dd16cab2a
import  -/  transaction-0.1.0.0@transaction-0.1.0.0-8uOaLxsteoo80COzXKWxl:Formatting df1b2f8585a70f79bfdeb1dbd765c7d5
import  -/  transaction-0.1.0.0@transaction-0.1.0.0-8uOaLxsteoo80COzXKWxl:Lib 07e4d1820edd1b35f7c982ba5a2c9a4e
import  -/  unix-time-0.3.7@unix-time-0.3.7-EhnEKT4D7hJajV74Sk5BE:Data.UnixTime 34ee891a10baf97f1ce65eb8d2c5de3e
import  -/  unix-time-0.3.7@unix-time-0.3.7-EhnEKT4D7hJajV74Sk5BE:Data.UnixTime.Sys 7674c4bbcf1e5de2a58d39d850eb495a
import  -/  unix-time-0.3.7@unix-time-0.3.7-EhnEKT4D7hJajV74Sk5BE:Data.UnixTime.Types e5700e4fdf011dd3e496b922659e53d6
55cc0268cc98fc00cf82c1fd862e5204
  $fEqTransaction :: GHC.Classes.Eq Main.Transaction
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Transaction
                  Main.$fEqTransaction_$c==
                  Main.$fEqTransaction_$c/= -}
55cc0268cc98fc00cf82c1fd862e5204
  $fEqTransaction_$c/= ::
    Main.Transaction -> Main.Transaction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Main.Transaction) (b :: Main.Transaction) ->
                 case Main.$fEqTransaction_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fEqTransaction_$c== ::
    Main.Transaction -> Main.Transaction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Transaction) (w1 :: Main.Transaction) ->
                 case w of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Main.Transaction ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.$w$c==
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction :: GHC.Classes.Ord Main.Transaction
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Transaction
                  Main.$fEqTransaction
                  Main.$fOrdTransaction_$ccompare
                  Main.$fOrdTransaction_$c<
                  Main.$fOrdTransaction_$c<=
                  Main.$fOrdTransaction_$c>
                  Main.$fOrdTransaction_$c>=
                  Main.$fOrdTransaction_$cmax
                  Main.$fOrdTransaction_$cmin -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction_$c< ::
    Main.Transaction -> Main.Transaction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Transaction) (w1 :: Main.Transaction) ->
                 case w of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Main.Transaction ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.$w$c<
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction_$c<= ::
    Main.Transaction -> Main.Transaction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Transaction) (w1 :: Main.Transaction) ->
                 case w of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Main.Transaction ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.$w$c<=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction_$c> ::
    Main.Transaction -> Main.Transaction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Transaction) (w1 :: Main.Transaction) ->
                 case w of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Main.Transaction ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.$w$c>
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction_$c>= ::
    Main.Transaction -> Main.Transaction -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Transaction) (w1 :: Main.Transaction) ->
                 case w of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Main.Transaction ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.$w$c>=
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction_$ccompare ::
    Main.Transaction -> Main.Transaction -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Transaction) (w1 :: Main.Transaction) ->
                 case w of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Main.Transaction ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ->
                 Main.$w$ccompare
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16
                   ww17 } }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction_$cmax ::
    Main.Transaction -> Main.Transaction -> Main.Transaction
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),U(U,U,U,U,U,U,U,U)><S(SLLLLLLL),U(U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.Transaction) (y :: Main.Transaction) ->
                 case Main.$fOrdTransaction_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fOrdTransaction_$cmin ::
    Main.Transaction -> Main.Transaction -> Main.Transaction
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),U(U,U,U,U,U,U,U,U)><S(SLLLLLLL),U(U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Main.Transaction) (y :: Main.Transaction) ->
                 case Main.$fOrdTransaction_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction :: GHC.Read.Read Main.Transaction
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Transaction
                  Main.$fReadTransaction_$creadsPrec
                  Main.$fReadTransaction_$creadList
                  Main.$fReadTransaction_$creadPrec
                  Main.$fReadTransaction_$creadListPrec -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([Main.Transaction] -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [Main.Transaction] -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ Main.Transaction
                   Main.$fReadTransaction2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.Transaction>_R))
                   eta
                   @ b
                   eta1) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP Main.Transaction
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ Main.Transaction
                   Main.$fReadTransaction3
                     `cast`
                   (Trans
                        (<Text.ParserCombinators.ReadPrec.Prec>_R
                         ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                       <Main.Transaction>_R))
                        (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                  <Main.Transaction>_R)))) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (Main.Transaction -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,C(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (w1 :: Main.Transaction -> Text.ParserCombinators.ReadP.P b) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$creadPrec ww1 @ b w1 }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction4 ::
    Text.ParserCombinators.ReadP.P [Main.Transaction]
  {- Unfolding: (GHC.Read.list1
                   @ Main.Transaction
                   Main.$fReadTransaction2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <Main.Transaction>_R))
                   GHC.Read.$fRead()5
                   @ [Main.Transaction]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [Main.Transaction])) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [Main.Transaction]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [Main.Transaction]
                   Main.$fReadTransaction4) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec [Main.Transaction]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTransaction1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[Main.Transaction]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[Main.Transaction]>_R))) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec Main.Transaction
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.$fReadTransaction2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <Main.Transaction>_R)) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fReadTransaction_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS Main.Transaction
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ Main.Transaction
                   ((GHC.Read.parens1
                       @ Main.Transaction
                       Main.$fReadTransaction3
                         `cast`
                       (Trans
                            (<Text.ParserCombinators.ReadPrec.Prec>_R
                             ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                           <Main.Transaction>_R))
                            (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                      <Main.Transaction>_R)))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0] <Main.Transaction>_R)
                      @ Main.Transaction
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ Main.Transaction))) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fShowTransaction :: GHC.Show.Show Main.Transaction
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Main.Transaction
                  Main.$fShowTransaction_$cshowsPrec
                  Main.$fShowTransaction_$cshow
                  Main.$fShowTransaction_$cshowList -}
55cc0268cc98fc00cf82c1fd862e5204
  $fShowTransaction1 :: Main.Transaction -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Main.Transaction) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Main.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 w1 }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fShowTransaction_$cshow :: Main.Transaction -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Main.Transaction) ->
                 Main.$fShowTransaction_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fShowTransaction_$cshowList ::
    [Main.Transaction] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Main.Transaction
                   Main.$fShowTransaction1) -}
55cc0268cc98fc00cf82c1fd862e5204
  $fShowTransaction_$cshowsPrec ::
    GHC.Types.Int -> Main.Transaction -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Transaction)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Transaction ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Main.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 w2 } }) -}
c84c48e4de94597cdcb29a4c43bec533
  $tc'Transaction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11003510976025690688##
                   10899681922975793847##
                   Main.$trModule
                   Main.$tc'Transaction1) -}
484abd46d95b7ed8f30970b517d31b61
  $tc'Transaction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Transaction"#) -}
4cd182ec0c26d58e2cb6df95c6a040c2
  $tcTransaction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14807809801147800200##
                   13180242393301684636##
                   Main.$trModule
                   Main.$tcTransaction1) -}
4546001a7bb3d33486569787c96254a9
  $tcTransaction1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Transaction"#) -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
6bb418d7388e7e53d3dc78087b00e66a
  $w$c< ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Base.String)
                   (ww7 :: GHC.Base.String)
                   (ww8 :: GHC.Base.String)
                   (ww9 :: GHC.Base.String)
                   (ww10 :: GHC.Base.String)
                   (ww11 :: GHC.Base.String)
                   (ww12 :: GHC.Base.String)
                   (ww13 :: GHC.Base.String)
                   (ww14 :: GHC.Base.String)
                   (ww15 :: GHC.Base.String) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww8 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww9 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww10 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww3 ww11 of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww12 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ
                                       -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww13 of wild5 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ
                                            -> case GHC.Classes.$fOrd[]_$s$ccompare1
                                                      ww6
                                                      ww14 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.True
                                                 GHC.Types.EQ -> GHC.Classes.$fOrd[]_$s$c<1 ww7 ww15
                                                 GHC.Types.GT -> GHC.Types.False }
                                            GHC.Types.GT -> GHC.Types.False }
                                       GHC.Types.GT -> GHC.Types.False }
                                  GHC.Types.GT -> GHC.Types.False }
                             GHC.Types.GT -> GHC.Types.False }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
a7d689a167110c9a102487fc905e72fe
  $w$c<= ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Base.String)
                   (ww7 :: GHC.Base.String)
                   (ww8 :: GHC.Base.String)
                   (ww9 :: GHC.Base.String)
                   (ww10 :: GHC.Base.String)
                   (ww11 :: GHC.Base.String)
                   (ww12 :: GHC.Base.String)
                   (ww13 :: GHC.Base.String)
                   (ww14 :: GHC.Base.String)
                   (ww15 :: GHC.Base.String) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww8 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww9 of wild1 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww10 of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww3 ww11 of wild3 {
                                  GHC.Types.LT -> GHC.Types.True
                                  GHC.Types.EQ
                                  -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww12 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ
                                       -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww13 of wild5 {
                                            GHC.Types.LT -> GHC.Types.True
                                            GHC.Types.EQ
                                            -> case GHC.Classes.$fOrd[]_$s$ccompare1
                                                      ww6
                                                      ww14 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.True
                                                 GHC.Types.EQ
                                                 -> GHC.Classes.$fOrd[]_$s$c<=1 ww7 ww15
                                                 GHC.Types.GT -> GHC.Types.False }
                                            GHC.Types.GT -> GHC.Types.False }
                                       GHC.Types.GT -> GHC.Types.False }
                                  GHC.Types.GT -> GHC.Types.False }
                             GHC.Types.GT -> GHC.Types.False }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False }) -}
c964539a5283f0b34713ea309b880e60
  $w$c== ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Base.String)
                   (ww7 :: GHC.Base.String)
                   (ww8 :: GHC.Base.String)
                   (ww9 :: GHC.Base.String)
                   (ww10 :: GHC.Base.String)
                   (ww11 :: GHC.Base.String)
                   (ww12 :: GHC.Base.String)
                   (ww13 :: GHC.Base.String)
                   (ww14 :: GHC.Base.String)
                   (ww15 :: GHC.Base.String) ->
                 case GHC.Base.eqString ww ww8 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Base.eqString ww1 ww9 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case GHC.Base.eqString ww2 ww10 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case GHC.Base.eqString ww3 ww11 of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case GHC.Base.eqString ww4 ww12 of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> case GHC.Base.eqString ww5 ww13 of wild5 {
                                            GHC.Types.False -> GHC.Types.False
                                            GHC.Types.True
                                            -> case GHC.Base.eqString ww6 ww14 of wild6 {
                                                 GHC.Types.False -> GHC.Types.False
                                                 GHC.Types.True
                                                 -> GHC.Base.eqString ww7 ww15 } } } } } } }) -}
9491e9925c4a4b2df8e2d2e73b928667
  $w$c> ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Base.String)
                   (ww7 :: GHC.Base.String)
                   (ww8 :: GHC.Base.String)
                   (ww9 :: GHC.Base.String)
                   (ww10 :: GHC.Base.String)
                   (ww11 :: GHC.Base.String)
                   (ww12 :: GHC.Base.String)
                   (ww13 :: GHC.Base.String)
                   (ww14 :: GHC.Base.String)
                   (ww15 :: GHC.Base.String) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww8 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww9 of wild1 {
                        GHC.Types.LT -> GHC.Types.False
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww10 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww3 ww11 of wild3 {
                                  GHC.Types.LT -> GHC.Types.False
                                  GHC.Types.EQ
                                  -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww12 of wild4 {
                                       GHC.Types.LT -> GHC.Types.False
                                       GHC.Types.EQ
                                       -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww13 of wild5 {
                                            GHC.Types.LT -> GHC.Types.False
                                            GHC.Types.EQ
                                            -> case GHC.Classes.$fOrd[]_$s$ccompare1
                                                      ww6
                                                      ww14 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.False
                                                 GHC.Types.EQ -> GHC.Classes.$fOrd[]_$s$c>1 ww7 ww15
                                                 GHC.Types.GT -> GHC.Types.True }
                                            GHC.Types.GT -> GHC.Types.True }
                                       GHC.Types.GT -> GHC.Types.True }
                                  GHC.Types.GT -> GHC.Types.True }
                             GHC.Types.GT -> GHC.Types.True }
                        GHC.Types.GT -> GHC.Types.True }
                   GHC.Types.GT -> GHC.Types.True }) -}
a68f71f6a19171b616b4949478e038a7
  $w$c>= ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Base.String)
                   (ww7 :: GHC.Base.String)
                   (ww8 :: GHC.Base.String)
                   (ww9 :: GHC.Base.String)
                   (ww10 :: GHC.Base.String)
                   (ww11 :: GHC.Base.String)
                   (ww12 :: GHC.Base.String)
                   (ww13 :: GHC.Base.String)
                   (ww14 :: GHC.Base.String)
                   (ww15 :: GHC.Base.String) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww8 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww9 of wild1 {
                        GHC.Types.LT -> GHC.Types.False
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww10 of wild2 {
                             GHC.Types.LT -> GHC.Types.False
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww3 ww11 of wild3 {
                                  GHC.Types.LT -> GHC.Types.False
                                  GHC.Types.EQ
                                  -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww12 of wild4 {
                                       GHC.Types.LT -> GHC.Types.False
                                       GHC.Types.EQ
                                       -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww13 of wild5 {
                                            GHC.Types.LT -> GHC.Types.False
                                            GHC.Types.EQ
                                            -> case GHC.Classes.$fOrd[]_$s$ccompare1
                                                      ww6
                                                      ww14 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.False
                                                 GHC.Types.EQ
                                                 -> GHC.Classes.$fOrd[]_$s$c>=1 ww7 ww15
                                                 GHC.Types.GT -> GHC.Types.True }
                                            GHC.Types.GT -> GHC.Types.True }
                                       GHC.Types.GT -> GHC.Types.True }
                                  GHC.Types.GT -> GHC.Types.True }
                             GHC.Types.GT -> GHC.Types.True }
                        GHC.Types.GT -> GHC.Types.True }
                   GHC.Types.GT -> GHC.Types.True }) -}
b7d910d468100c8de8e15d4ef97a9d73
  $w$ccompare ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Ordering
  {- Arity: 16, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String)
                   (ww5 :: GHC.Base.String)
                   (ww6 :: GHC.Base.String)
                   (ww7 :: GHC.Base.String)
                   (ww8 :: GHC.Base.String)
                   (ww9 :: GHC.Base.String)
                   (ww10 :: GHC.Base.String)
                   (ww11 :: GHC.Base.String)
                   (ww12 :: GHC.Base.String)
                   (ww13 :: GHC.Base.String)
                   (ww14 :: GHC.Base.String)
                   (ww15 :: GHC.Base.String) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww8 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww1 ww9 of wild1 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww10 of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww3 ww11 of wild3 {
                                  GHC.Types.LT -> GHC.Types.LT
                                  GHC.Types.EQ
                                  -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww12 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ
                                       -> case GHC.Classes.$fOrd[]_$s$ccompare1 ww5 ww13 of wild5 {
                                            GHC.Types.LT -> GHC.Types.LT
                                            GHC.Types.EQ
                                            -> case GHC.Classes.$fOrd[]_$s$ccompare1
                                                      ww6
                                                      ww14 of wild6 {
                                                 GHC.Types.LT -> GHC.Types.LT
                                                 GHC.Types.EQ
                                                 -> GHC.Classes.$fOrd[]_$s$ccompare1 ww7 ww15
                                                 GHC.Types.GT -> GHC.Types.GT }
                                            GHC.Types.GT -> GHC.Types.GT }
                                       GHC.Types.GT -> GHC.Types.GT }
                                  GHC.Types.GT -> GHC.Types.GT }
                             GHC.Types.GT -> GHC.Types.GT }
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT }) -}
55cc0268cc98fc00cf82c1fd862e5204
  $w$creadPrec ::
    GHC.Prim.Int#
    -> forall b.
       (Main.Transaction -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <S,U><L,C(U)>, Inline: [0] -}
6df3414864f9964c7f5135181b91ba25
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 10,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
b4276c6e6a4bded23b0b7e063df7a33d
  $wlvl ::
    Main.Transaction -> (# GHC.Types.Float, Main.Transaction #)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: Main.Transaction) ->
                 (# case Text.Read.readEither6
                           @ GHC.Types.Float
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Float
                              Main.editTransaction6
                              (case w of wild { Main.Transaction ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                               ds6 })) of wild {
                      []
                      -> GHC.Err.errorWithoutStackTrace
                           @ 'GHC.Types.PtrRepLifted
                           @ GHC.Types.Float
                           Text.Read.readEither4
                      : x ds
                      -> case ds of wild1 {
                           [] -> x
                           : ipv ipv1
                           -> GHC.Err.errorWithoutStackTrace
                                @ 'GHC.Types.PtrRepLifted
                                @ GHC.Types.Float
                                Text.Read.readEither2 } },
                    w #)) -}
55e7124c50dfa8744b187085396a0317
  $wmergeData' ::
    (Main.Transaction -> Main.Transaction)
    -> [Main.Transaction]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3,
     Strictness: <L,C(U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><S,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Transaction -> Main.Transaction)
                   (w1 :: [Main.Transaction])
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go4 :: [Main.Transaction]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [Main.Transaction])
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 (case w y of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                                  Main.$w$cshowsPrec
                                    0#
                                    ww1
                                    ww2
                                    ww3
                                    ww4
                                    ww5
                                    ww6
                                    ww7
                                    ww8
                                    (GHC.Types.[] @ GHC.Types.Char) })
                                 GHC.Types.True
                                 eta of ds1 { (#,#) ipv ipv1 ->
                          go4 ys ipv } }
                 } in
                 go4 w1 w2) -}
c36eae3df64010dd3f9ed36017735af2
  $wxs :: GHC.Prim.Int# -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
55cc0268cc98fc00cf82c1fd862e5204
  data Transaction
    = Transaction {_uid :: GHC.Base.String,
                   _user :: GHC.Base.String,
                   _accountNum :: GHC.Base.String,
                   _routingNumber :: GHC.Base.String,
                   _category :: GHC.Base.String,
                   _description :: GHC.Base.String,
                   _amount :: GHC.Base.String,
                   _updatedAt :: GHC.Base.String}
6b6fddf14b9a3f45b3107b9c98f153e7
  _accountNum :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
901925a8ad080f840ee72dfbfcc6d6ac
  _amount :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
383f46a1455a32c88898f6399856a565
  _category :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
fcb988c90f514b0cd1c76c89bda97c74
  _description :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
1d916ac79fe86c21fbf0276eba2e353f
  _routingNumber :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
62dee5a086018b0ef59eefb88de1d4b1
  _uid :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
5041070a3ffee3807732d97930d0f055
  _updatedAt :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
51761885624e5f8f4be5412bef8889bd
  _user :: Main.Transaction -> GHC.Base.String
  RecSel Left Main.Transaction
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
4bc46be1b27c8b6d3a3c7cc34dc64d94
  accountNum ::
    Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction x1 x2 y1 x4 x5 x6 x7 x8)
                   (f1 x3) }) -}
2d7cc2b4e169e859ff5cdc8a4dfdfe61
  addTransaction :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.addTransaction1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
bd53420e0c25f5580497f18eb6a50918
  addTransaction1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Data.UnixTime.Sys.getUnixTime1 s of ds1 { (#,#) ipv ipv1 ->
                 Main.addTransaction2 ipv1 ipv }) -}
92e2d4b0f3eaf11c62cd1ded29b5c712
  addTransaction2 ::
    Data.UnixTime.Types.UnixTime
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U,A)><S,U> -}
7bb5aadc521a51e7e372b543275e148b
  amount :: Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction x1 x2 x3 x4 x5 x6 y1 x8)
                   (f1 x7) }) -}
96711c26f5bfddb6396370f94e2961ad
  category ::
    Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction x1 x2 x3 x4 y1 x6 x7 x8)
                   (f1 x5) }) -}
ffc268b22579a0af3dab70ee8d0c5936
  change' ::
    (Main.Transaction -> Main.Transaction)
    -> GHC.Base.String -> [Main.Transaction] -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,C(U(A,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><L,U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.change'1
                  `cast`
                (<Main.Transaction -> Main.Transaction>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <[Main.Transaction]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
014d3fff8281a482cef102026de477f5
  change'1 ::
    (Main.Transaction -> Main.Transaction)
    -> GHC.Base.String
    -> [Main.Transaction]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,C(U(A,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><L,U><S,1*U><S,U>,
     Unfolding: (\ (l :: Main.Transaction -> Main.Transaction)
                   (uidValue :: GHC.Base.String)
                   (eta :: [Main.Transaction])
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go4 :: [Main.Transaction]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [Main.Transaction])
                       (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta2, GHC.Tuple.() #)
                       : y ys
                       -> case GHC.IO.Handle.Text.hPutStr2
                                 GHC.IO.Handle.FD.stdout
                                 (case l y of wild1 { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                                  Main.$w$cshowsPrec
                                    0#
                                    uidValue
                                    x2
                                    x3
                                    x4
                                    x5
                                    x6
                                    x7
                                    x8
                                    (GHC.Types.[] @ GHC.Types.Char) })
                                 GHC.Types.True
                                 eta2 of ds1 { (#,#) ipv ipv1 ->
                          go4 ys ipv } }
                 } in
                 go4 eta eta1) -}
e63775ad882bdc4e6cbc4d9d0da73239
  clearFile :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.clearFile1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
692dcc8a76117ab6dcfb495018713544
  clearFile1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
f646c45e94ebd788bb2b84cd6b0160bb
  clearingFile :: [GHC.Types.Char] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.clearingFile1
                  `cast`
                (<[GHC.Types.Char]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
37ee88f04889862a54056b39b9eff722
  clearingFile1 ::
    [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
c9f8c6808addc54d62f88e1cf130b333
  colorTrans ::
    Main.Transaction
    -> System.Console.ANSI.Types.Color -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.colorTrans1
                  `cast`
                (<Main.Transaction>_R
                 ->_R <System.Console.ANSI.Types.Color>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1eb3999347b6df27e041342899ae8b8e
  colorTrans1 ::
    Main.Transaction
    -> System.Console.ANSI.Types.Color
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,U><S,U>,
     Unfolding: (\ (t :: Main.Transaction)
                   (c :: System.Console.ANSI.Types.Color)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 letrec {
                   go4 :: [(Main.Transaction -> [GHC.Types.Char], [GHC.Types.Char])]
                          -> GHC.Prim.State# GHC.Prim.RealWorld
                          -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [(Main.Transaction -> [GHC.Types.Char],
                                [GHC.Types.Char])])
                       (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                     case ds of wild {
                       [] -> (# eta, GHC.Tuple.() #)
                       : y ys
                       -> case Main.colorTrans2
                                 @ []
                                 @ GHC.Types.Char
                                 Data.Foldable.$fFoldable[]
                                 GHC.Classes.$fOrd[]_$s$fOrd[]1
                                 (case y of wild1 { (,) x ds1 -> x })
                                 (case y of wild1 { (,) x ds1 -> x t })
                                 c
                                 eta of ds1 { (#,#) ipv ipv1 ->
                          go4 ys ipv } }
                 } in
                 case go4 Main.headers s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.True
                   ipv }) -}
a3d55b1ce36838bcfd6947af3856fc25
  colorTrans2 ::
    (Data.Foldable.Foldable t, GHC.Classes.Ord (t a)) =>
    (Main.Transaction -> t a)
    -> [GHC.Types.Char]
    -> System.Console.ANSI.Types.Color
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 6,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,1*C1(U(U)),A,A,A,A,A)><L,1*U(A,A,A,A,A,A,1*U,A)><L,C(U)><L,U><L,U><S,U>,
     Unfolding: (\ @ (t :: * -> *)
                   @ a
                   ($dFoldable :: Data.Foldable.Foldable t)
                   ($dOrd :: GHC.Classes.Ord (t a))
                   (n :: Main.Transaction -> t a)
                   (o :: [GHC.Types.Char])
                   (c :: System.Console.ANSI.Types.Color)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.colorTrans3 eta of ds1 { (#,#) ipv ipv1 ->
                 Formatting.colorPutPartial1
                   (GHC.CString.unpackAppendCString#
                      "| "#
                      (GHC.Base.++
                         @ GHC.Types.Char
                         o
                         (case Data.Foldable.length
                                 @ t
                                 $dFoldable
                                 @ a
                                 (GHC.List.maximum
                                    @ (t a)
                                    $dOrd
                                    (GHC.Base.map
                                       @ Main.Transaction
                                       @ (t a)
                                       (\ (x :: Main.Transaction) -> n x)
                                       ipv1)) of wild { GHC.Types.I# x ->
                          case GHC.List.$wlenAcc @ GHC.Types.Char o 0# of ww2 { DEFAULT ->
                          let {
                            y :: GHC.Prim.Int# = GHC.Prim.+# (GHC.Prim.-# x ww2) 5#
                          } in
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<# 0# y) of wild1 {
                            GHC.Types.False -> GHC.Types.[] @ GHC.Types.Char
                            GHC.Types.True -> Main.$wxs y } } })))
                   c
                   ipv }) -}
835d3f7298fd13704fab19d00a329944
  colorTrans3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Main.Transaction] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.file
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Main.colorTrans4 (Data.OldList.lines ipv3) ipv2 } }) -}
3021cd0f618902f31311c5a4825ee0f4
  colorTrans4 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Main.Transaction] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
538a6f26543a37ef3890fbdb4914a996
  cols ::
    (Data.Foldable.Foldable t, GHC.Classes.Ord (t a)) =>
    (Main.Transaction -> t a)
    -> [GHC.Types.Char]
    -> System.Console.ANSI.Types.Color
    -> GHC.Types.IO ()
  {- Arity: 6,
     Strictness: <L,1*U(A,A,A,A,A,A,A,A,A,A,1*C1(U(U)),A,A,A,A,A)><L,1*U(A,A,A,A,A,A,1*U,A)><L,C(U)><L,U><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.colorTrans2
                  `cast`
                (forall (t :: <* -> *>_N) (a :: <*>_N).
                 <Data.Foldable.Foldable t>_R
                 ->_R <GHC.Classes.Ord (t a)>_R
                 ->_R <Main.Transaction -> t a>_R
                 ->_R <[GHC.Types.Char]>_R
                 ->_R <System.Console.ANSI.Types.Color>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5f30415995ebfdd42e2a71bb58173154
  continue :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.continue1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
53ff7d6443dbbd951efd3032826043f6
  continue1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
bb05118d004ca88fb53dde2ee8621fec
  delete :: GHC.Base.String -> [Main.Transaction] -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.delete1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R <[Main.Transaction]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5f151310ace2c529cad697fc67bb4475
  delete1 ::
    GHC.Base.String
    -> [Main.Transaction]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U> -}
870ce892502127689227a74290d49a62
  deleteLine :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.deleteLine1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
099cbd3d9e685eb5c4f4d4102b9463c4
  deleteLine1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
117e04379fb59088960de498d0d38c17
  description ::
    Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction x1 x2 x3 x4 x5 y1 x7 x8)
                   (f1 x6) }) -}
e0a7f7cabb0d5fe5f2d0741823a4a681
  editTransaction :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.editTransaction1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
58e6c6bdebcd6f4323238063dbe87246
  editTransaction1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.FD.openFile1
                        Main.file
                        GHC.IO.IOMode.ReadMode
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hGetContents1
                        ipv1
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Main.colorTrans3 ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.editTransaction9
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 case GHC.List.filter
                        @ Main.Transaction
                        (\ (x :: Main.Transaction) ->
                         case x of wild { Main.Transaction ds ds6 ds7 ds8 ds9 ds10 ds11 ds12 ->
                         GHC.Base.eqString ds ipv9 })
                        ipv5 of wild {
                   []
                   -> Formatting.colorPutStr1
                        Main.editTransaction8
                        System.Console.ANSI.Types.Red
                        ipv8
                   : first ds
                   -> case Main.editTransaction7
                             Main.headers
                             ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                      case GHC.IO.Handle.Text.hPutStr2
                             GHC.IO.Handle.FD.stdout
                             (GHC.Types.[] @ GHC.Types.Char)
                             GHC.Types.True
                             ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                      case Main.editTransaction3
                             first
                             ipv12 of ds8 { (#,#) ipv14 ipv15 ->
                      Main.editTransaction2 ipv5 first ipv9 ipv14 } } } } } } } } }) -}
85492a719a42621644e03189b2995868
  editTransaction2 ::
    [Main.Transaction]
    -> Main.Transaction
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,1*U><L,1*U(U,U,U,U,U,U,U,U)><L,U><S,U> -}
fca6a0bea789ffd70911815bc4f8d567
  editTransaction3 ::
    Main.Transaction
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (t :: Main.Transaction)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Text.Read.readEither6
                        @ GHC.Types.Float
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Float
                           Main.editTransaction6
                           (case t of wild { Main.Transaction ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                            ds6 })) of wild {
                   []
                   -> case Main.editTransaction5
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case x of wild2 { GHC.Types.F# x1 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.ltFloat# x1 0.0#) of wild3 {
                             GHC.Types.False
                             -> Main.colorTrans1 t System.Console.ANSI.Types.Green eta
                             GHC.Types.True
                             -> Main.colorTrans1 t System.Console.ANSI.Types.Black eta } }
                        : ipv ipv1
                        -> case Main.editTransaction4
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } }) -}
4234209e290bc895564f6e38f77c6a79
  editTransaction4 :: GHC.Types.Float
  {- Strictness: x -}
86f3b50beceb0d261355d2c7dc9ed7b1
  editTransaction5 :: GHC.Types.Float
  {- Strictness: x -}
0cd21b5253f9b98855a4d98e37fae979
  editTransaction6 :: Text.ParserCombinators.ReadP.P GHC.Types.Float
  {- Unfolding: (GHC.Read.$fReadFloat7
                   GHC.Read.$fReadFloat_$sconvertFrac
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Float
                   (Text.Read.readEither5 @ GHC.Types.Float)) -}
4b08b7687fe959c02918d35734e35000
  editTransaction7 ::
    [(Main.Transaction -> [GHC.Types.Char], [GHC.Types.Char])]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
b0e7c8d9a63053687bc791bcad001182
  editTransaction8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "No Records Available"#) -}
9d93825e6979d73615231be82170a524
  editTransaction9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Which record do you want to edit?"#) -}
d152ef0574373a97148abd85ddb59de5
  file :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "./.transactions.txt"#) -}
d950177a7ee0089cd79129b16480c77c
  formatHeaders :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.formatHeaders1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3362aae279a3ac0ac9e8821d6cd29a3f
  formatHeaders1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.editTransaction7
                        Main.headers
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (GHC.Types.[] @ GHC.Types.Char)
                   GHC.Types.True
                   ipv }) -}
b8d87577756bb3922282c6804c38470a
  formatTransactionOutput :: Main.Transaction -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.editTransaction3
                  `cast`
                (<Main.Transaction>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
b4526af1415427edb1d082c8730b9d82
  getDest :: GHC.Types.Bool -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getDest1
                  `cast`
                (<GHC.Types.Bool>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1f200a64b20a9cac61837684f131c189
  getDest1 ::
    GHC.Types.Bool
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
2f6cd591f317dd26408c655038636a9b
  getIncome :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getIncome1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
077bf55e0386f737e8f89406e1b880a3
  getIncome1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
d6ad49b952301d0f4c4016767100e151
  getSum :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getSum1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
cca56493580efa683196ff08a0063469
  getSum1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
741ab5ba8edee240447fecbee24c1179
  getTransactionRecords :: GHC.Types.IO [Main.Transaction]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.colorTrans3
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[Main.Transaction]>_R)) -}
3f00cf361455d863b9235f49f09b07ca
  getVals :: GHC.Types.IO [GHC.Base.String]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getVals1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
2060c701b9e646110d31056335698896
  getVals1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.getVals3
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.getVals2
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case Data.UnixTime.Sys.getUnixTime1
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 (# ipv8,
                    GHC.Types.:
                      @ GHC.Base.String
                      ipv3
                      (GHC.Types.:
                         @ GHC.Base.String
                         ipv7
                         (GHC.Types.:
                            @ GHC.Base.String
                            (case ipv9 of wild { Data.UnixTime.Types.UnixTime dt dt1 ->
                             case GHC.Show.$wshowSignedInt
                                    0#
                                    dt
                                    (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                             GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                            (GHC.Types.[] @ GHC.Base.String))) #) } } } } }) -}
fdc211b04c6e2fe94138792ec0bccaeb
  getVals2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Which record do you want to edit? (Enter ID #)"#) -}
ee36550b798601c5ce9fd8ce19e685df
  getVals3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "What is the new value?"#) -}
b70f4882e14dd90efc80f48579120ce0
  headers ::
    [(Main.Transaction -> GHC.Base.String, [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
                   Main.headers19
                   Main.headers1) -}
535d9625efee2cbd687290de42bc0e2d
  headers1 ::
    [(Main.Transaction -> GHC.Base.String, [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
                   Main.headers17
                   Main.headers2) -}
cc681c9bd7caff134e9e7ff5410c24fd
  headers10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "UPDATED AT"#) -}
e49a939d88c50eacba9ac9c96f165ec8
  headers11 ::
    (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main._accountNum, Main.headers12)) -}
0271a35181e4fbcd341fc039b77efab3
  headers12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ACCT #"#) -}
9edded4ead0d71179024a7bba8e02f13
  headers13 ::
    (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main._routingNumber, Main.headers14)) -}
f079541074ff739c993bfa50b9f16b10
  headers14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "RTNG #"#) -}
a9fb23c3f0905d17c31b1735a3d8a112
  headers15 ::
    (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
  {- Strictness: m, Unfolding: ((Main._user, Main.headers16)) -}
a3ecf5b3b5837fa13d910eed08bfd64c
  headers16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "USER"#) -}
4b2f70b986516bfdce735c53849045d3
  headers17 ::
    (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
  {- Strictness: m, Unfolding: ((Main._amount, Main.headers18)) -}
e80fa7f7c15b9e8e2010e0e2da696a42
  headers18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "AMOUNT ($)"#) -}
005ce8e100472d0bd187f7f9955667a1
  headers19 ::
    (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
  {- Strictness: m, Unfolding: ((Main._uid, Main.headers20)) -}
e7c89e817de2db9dbfd41c32e8734353
  headers2 ::
    [(Main.Transaction -> GHC.Base.String, [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
                   Main.headers15
                   Main.headers3) -}
11f430c0a110d38453b715cb66c3d5e8
  headers20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ID"#) -}
ce288d84c93d27c982955e74ec382542
  headers3 ::
    [(Main.Transaction -> GHC.Base.String, [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
                   Main.headers13
                   Main.headers4) -}
f6b669b2cfa82ff7f60673291593e94b
  headers4 ::
    [(Main.Transaction -> GHC.Base.String, [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
                   Main.headers11
                   Main.headers5) -}
16d249a9d12db7dd871b83152946fef3
  headers5 ::
    [(Main.Transaction -> GHC.Base.String, [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
                   Main.headers9
                   Main.headers6) -}
a92c3d90e55dc8175c76ece84b35b6f6
  headers6 ::
    [(Main.Transaction -> GHC.Base.String, [GHC.Types.Char])]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
                   Main.headers7
                   (GHC.Types.[]
                      @ (Main.Transaction -> GHC.Base.String, [GHC.Types.Char]))) -}
7527ef38e2a62882f9d693ec1d55b97f
  headers7 :: (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
  {- Strictness: m,
     Unfolding: ((Main._description, Main.headers8)) -}
e0c38c8643f3f2692b48b9acce3d77da
  headers8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "DESC"#) -}
cdba2c67da5cc0ae36bc9e8db3790dfc
  headers9 :: (Main.Transaction -> GHC.Base.String, [GHC.Types.Char])
  {- Strictness: m, Unfolding: ((Main._updatedAt, Main.headers10)) -}
6dbcab078e17d5be811ddc7534ebf7a0
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
7b0ba15981f902b46a5ec7362ee31dc8
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.main4
                        GHC.Types.False
                        s of ds1 { (#,#) ipv ipv1 ->
                 case (Main.main2
                         System.Directory.doesDirectoryExist1
                           `cast`
                         (<GHC.IO.Exception.IOError>_R
                          ->_R Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.Types.Bool>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Main.getDest1 ipv3 ipv2 } }) -}
690764ca54928b1a2c36c33bca23a3a3
  main2 ::
    (GHC.IO.Exception.IOError -> GHC.Types.IO GHC.Types.Bool)
    -> GHC.Types.IO GHC.Types.Bool
  {- Unfolding: (System.IO.Error.catchIOError
                   @ GHC.Types.Bool
                   Main.main3 `cast` (Sym (GHC.Types.N:IO[0] <GHC.Types.Bool>_R))) -}
1bbafcef1e5bf8616d973aef63bff4f3
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Bool #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case System.Posix.Files.getFileStatus1
                        Main.file
                        s1 of ds10 { (#,#) ipv ipv1 ->
                 System.Directory.doesFileExist1 ipv1 ipv }) -}
013be179061650d5e0e47199dea542b0
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "\ESC]0;"#
                   Main.main5) -}
0d99385b6df2b42e6cb6728e168b0ce1
  main5 :: [GHC.Types.Char]
  {- Unfolding: (System.Console.ANSI.Codes.setTitleCode_go
                   Main.main6) -}
5f0a6013ddeaa1917ebadec84e3edaf1
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "Banking Transactions"#) -}
250cc3d96eb3a9bd505c0ad14b615a7b
  main7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
dc7c74b97f67364607145207556cad1f
  match' ::
    GHC.Base.Functor f =>
    [GHC.Types.Char]
    -> (GHC.Base.String -> f GHC.Base.String)
    -> Main.Transaction
    -> f Main.Transaction
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (x :: [GHC.Types.Char]) ->
                 case GHC.Base.eqString x Main.match'9 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString x Main.match'8 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString x Main.match'7 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString x Main.match'6 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString x Main.match'5 of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Base.eqString x Main.match'4 of wild5 {
                                            GHC.Types.False
                                            -> case GHC.Base.eqString x Main.match'3 of wild6 {
                                                 GHC.Types.False
                                                 -> case GHC.Base.eqString x Main.match'2 of wild7 {
                                                      GHC.Types.False -> Main.match'10 @ f
                                                      GHC.Types.True -> Main.user @ f $dFunctor }
                                                 GHC.Types.True -> Main.updatedAt @ f $dFunctor }
                                            GHC.Types.True -> Main.uid @ f $dFunctor }
                                       GHC.Types.True -> Main.routingNumber @ f $dFunctor }
                                  GHC.Types.True -> Main.description @ f $dFunctor }
                             GHC.Types.True -> Main.category @ f $dFunctor }
                        GHC.Types.True -> Main.amount @ f $dFunctor }
                   GHC.Types.True -> Main.accountNum @ f $dFunctor }) -}
9d0c9a858c4736cec5c5925e901c01e9
  match'1 ::
    (GHC.Base.String -> Data.Functor.Identity.Identity GHC.Base.String)
    -> Main.Transaction
    -> Data.Functor.Identity.Identity Main.Transaction
  {- Strictness: x -}
f8164a607595e1db5b40a0242e5dd49c
  match'10 ::
    (GHC.Base.String -> f GHC.Base.String)
    -> Main.Transaction -> f Main.Transaction
  {- Strictness: x -}
1486cfaa7f9df65aa0aee9104398eab9
  match'2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "user"#) -}
cc9aba8eb281726ff5368f98f46b140a
  match'3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "updatedAt"#) -}
2588717f8d2c845c7e055c3c239721a0
  match'4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "uid"#) -}
d8682e65298d7a8deacfa108852b49a1
  match'5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "routingNumber"#) -}
f759df3723a731eefc1b1455bdaa93e0
  match'6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "description"#) -}
a98e7448363ab93d24e857b0d507c848
  match'7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "category"#) -}
86d9f0f67dfd01fd9ec9c48ae25d1d69
  match'8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "amount"#) -}
641677cd708700e5edd8c64c984733f6
  match'9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "accountNum"#) -}
979dba422f065d48c452ec95da0ed046
  mergeData' ::
    (Main.Transaction -> Main.Transaction)
    -> GHC.Base.String -> [Main.Transaction] -> GHC.Types.IO ()
  {- Arity: 4,
     Strictness: <L,C(U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><L,A><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.mergeData'1
                  `cast`
                (<Main.Transaction -> Main.Transaction>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <[Main.Transaction]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
5188ad74f30af052e92453c867ec6d6a
  mergeData'1 ::
    (Main.Transaction -> Main.Transaction)
    -> GHC.Base.String
    -> [Main.Transaction]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4,
     Strictness: <L,C(U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U))><L,A><S,1*U><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: Main.Transaction -> Main.Transaction)
                   (w1 :: GHC.Base.String)
                   (w2 :: [Main.Transaction])
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 Main.$wmergeData' w w2 w3) -}
d85891c233ef845377a4edf5615a0c14
  names :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names24
                   Main.names1) -}
2a4a0773d5baef17076bb2f94a9a58b2
  names1 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names22
                   Main.names2) -}
6cf703d5182b5603fe66b37cd79fdeb7
  names10 :: [GHC.Types.Char] -> [[GHC.Types.Char]]
  {- Unfolding: (Data.List.Split.Internals.splitOn
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   Main.names11) -}
81789142a1412ae1b82a53e5f4667a7b
  names11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_"#) -}
513b11b316775a538f3944c2b84a4340
  names12 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names13)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
a25ccbf21679f96f34df37b979069d4f
  names13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_amount"#) -}
3f632ad8b46ce0e615bfbb7a66b4692d
  names14 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names15)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
e87ca87aba75369f5c36683f95ee0a64
  names15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_description"#) -}
a63ed23e3af01440b284dce7d82f6ba6
  names16 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names17)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
3e2d504cd2539fa7bddecfb0c7228b2d
  names17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_category"#) -}
31cd864777f9d155419dc404440537ef
  names18 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names19)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
9f0e724ffe5e6981a17a45d0a8dd33b4
  names19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_routingNumber"#) -}
76b3bc7f7064da194acac9e8f2d12ecc
  names2 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names20
                   Main.names3) -}
9288d97c3910f64424ba2a406911a308
  names20 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names21)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
c00045afcce9a7350ee8a7f05bf665b1
  names21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_accountNum"#) -}
4d7854699c2b319237b3356a2722d955
  names22 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names23)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
17c63abe57938f28f2999303f441e2c3
  names23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_user"#) -}
b0b5264a7dd3841b2922c34082690e8c
  names24 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names25)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
be945458623c993e8e536014d26951aa
  names25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_uid"#) -}
5dc4faa0a9992bf67e0322ccea2d07a0
  names3 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names18
                   Main.names4) -}
a94d22b0b66cdabe837f58b9e36ae5d7
  names4 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names16
                   Main.names5) -}
439f081422d9acaa72bb30914590db21
  names5 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names14
                   Main.names6) -}
f7008f363102b2879e99bfe603a15ccf
  names6 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names12
                   Main.names7) -}
b4e348e5079584436c25de34d3b3645d
  names7 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Main.names8
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
c593f7fcafcd3784a448ff744f8f1a46
  names8 :: [GHC.Types.Char]
  {- Unfolding: (Main.names_go
                   (Main.names10 Main.names9)
                   (GHC.List.lastError @ [GHC.Types.Char])) -}
deb29bb12a50979d8840ea85695cb4ed
  names9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "_updatedAt"#) -}
b4f9e4855262d799cf2c9001a9b5be59
  names_go ::
    [[GHC.Types.Char]] -> [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
b17984842734ec2a7cee8880fedece9a
  nextMove :: [GHC.Types.Char] -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.nextMove1
                  `cast`
                (<[GHC.Types.Char]>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8d64161e72be5582cc07e14d3d6a1b13
  nextMove1 ::
    [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,U><S,U> -}
65feec58b1434bedb5954600a7fb42b9
  routeEditTransaction ::
    [Main.Transaction]
    -> Main.Transaction -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 4, Strictness: <L,1*U><L,1*U(U,U,U,U,U,U,U,U)><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.editTransaction2
                  `cast`
                (<[Main.Transaction]>_R
                 ->_R <Main.Transaction>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
d6dd992607e4fc35ab8e30083a543b2f
  routingNumber ::
    Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction x1 x2 x3 y1 x5 x6 x7 x8)
                   (f1 x4) }) -}
e9fe31ee0152307c85936d75ba4ddc21
  sec :: (t, t1) -> t1
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ t @ t1 (ds :: (t, t1)) -> case ds of wild { (,) x y -> y }) -}
98c3214fc1e443b2e2b255094a6ca8f9
  sortIt :: GHC.Types.IO [Main.Transaction]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.sortIt1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[Main.Transaction]>_R)) -}
e3a0bef5099f49cb6a7188accfd2fc01
  sortIt1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [Main.Transaction] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case Main.colorTrans3 s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    GHC.Base.map
                      @ (GHC.Types.Float, Main.Transaction)
                      @ Main.Transaction
                      (Main.sec @ GHC.Types.Float @ Main.Transaction)
                      (Data.OldList.sortBy
                         @ (GHC.Types.Float, Main.Transaction)
                         Main.sortIt3
                         (GHC.Base.map
                            @ Main.Transaction
                            @ (GHC.Types.Float, Main.Transaction)
                            Main.sortIt2
                            ipv1)) #) }) -}
125672af100032489062de44992e3568
  sortIt2 :: Main.Transaction -> (GHC.Types.Float, Main.Transaction)
  {- Arity: 1, Strictness: <L,U(U,U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Transaction) ->
                 case Main.$wlvl w of ww { (#,#) ww1 ww2 -> (ww1, ww2) }) -}
7d2ac068f1cfa6d7cf5b97dee926d1fb
  sortIt3 ::
    (GHC.Types.Float, Main.Transaction)
    -> (GHC.Types.Float, Main.Transaction) -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (w2 :: (GHC.Types.Float, Main.Transaction))
                   (w3 :: (GHC.Types.Float, Main.Transaction))[OneShot] ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case w3 of ww3 { (,) ww4 ww5 ->
                 case ww1 of wild { GHC.Types.F# x ->
                 case ww4 of wild1 { GHC.Types.F# y ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.ltFloat# x y) of wild2 {
                   GHC.Types.False
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqFloat# x y) of wild3 {
                        GHC.Types.False -> GHC.Types.GT
                        GHC.Types.True -> Main.$fOrdTransaction_$ccompare ww2 ww5 }
                   GHC.Types.True -> GHC.Types.LT } } } } }) -}
507e777d97b95a8f0ac72947dd3061fa
  uid :: Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction y1 x2 x3 x4 x5 x6 x7 x8)
                   (f1 x1) }) -}
6e982c75dd38d7da5b742eff1ba68514
  update ::
    [GHC.Types.Char]
    -> GHC.Base.String -> Main.Transaction -> Main.Transaction
  {- Arity: 3, Strictness: <S,U><L,U><S,1*U(U,U,U,U,U,U,U,U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [GHC.Types.Char])
                   (w1 :: GHC.Base.String)
                   (w2 :: Main.Transaction) ->
                 case w2 of ww { Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case GHC.Base.eqString w Main.match'9 of wild {
                   GHC.Types.False
                   -> case GHC.Base.eqString w Main.match'8 of wild1 {
                        GHC.Types.False
                        -> case GHC.Base.eqString w Main.match'7 of wild2 {
                             GHC.Types.False
                             -> case GHC.Base.eqString w Main.match'6 of wild3 {
                                  GHC.Types.False
                                  -> case GHC.Base.eqString w Main.match'5 of wild4 {
                                       GHC.Types.False
                                       -> case GHC.Base.eqString w Main.match'4 of wild5 {
                                            GHC.Types.False
                                            -> case GHC.Base.eqString w Main.match'3 of wild6 {
                                                 GHC.Types.False
                                                 -> case GHC.Base.eqString w Main.match'2 of wild7 {
                                                      GHC.Types.False
                                                      -> case Main.match'1
                                                         ret_ty Main.Transaction
                                                         of {}
                                                      GHC.Types.True
                                                      -> Main.Transaction
                                                           ww1
                                                           w1
                                                           ww3
                                                           ww4
                                                           ww5
                                                           ww6
                                                           ww7
                                                           ww8 }
                                                 GHC.Types.True
                                                 -> Main.Transaction
                                                      ww1
                                                      ww2
                                                      ww3
                                                      ww4
                                                      ww5
                                                      ww6
                                                      ww7
                                                      w1 }
                                            GHC.Types.True
                                            -> Main.Transaction w1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 }
                                       GHC.Types.True
                                       -> Main.Transaction ww1 ww2 ww3 w1 ww5 ww6 ww7 ww8 }
                                  GHC.Types.True
                                  -> Main.Transaction ww1 ww2 ww3 ww4 ww5 w1 ww7 ww8 }
                             GHC.Types.True -> Main.Transaction ww1 ww2 ww3 ww4 w1 ww6 ww7 ww8 }
                        GHC.Types.True -> Main.Transaction ww1 ww2 ww3 ww4 ww5 ww6 w1 ww8 }
                   GHC.Types.True
                   -> Main.Transaction ww1 ww2 w1 ww4 ww5 ww6 ww7 ww8 } }) -}
93f262b5fa5f21305001f3523c18dd1c
  updateFile :: GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.updateFile1
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
0f7a9f820e476f8517583fa0472b79ca
  updateFile1 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (s :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.IO.appendFile1
                        Main.file
                        s
                        eta of ds1 { (#,#) ipv ipv1 ->
                 Main.updateFile2 ipv }) -}
e21967161d06ebe2ca79aaa975ef98e6
  updateFile2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.IO.appendFile1
                        Main.file
                        Main.updateFile4
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Formatting.colorPutStr1
                        Main.updateFile3
                        System.Console.ANSI.Types.Green
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 Formatting.clearConsole1 ipv2 } }) -}
a6151b845ae25c67f40e00f7af2ae28f
  updateFile3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "RECORDED TRANSACTION."#) -}
84ea034252aaef487b49bcd9401a7b94
  updateFile4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "\n"#) -}
b47c1389746e99a001ade2d9d2f8fd78
  updatedAt ::
    Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction x1 x2 x3 x4 x5 x6 x7 y1)
                   (f1 x8) }) -}
b41a52895c3867879dd157b11e421ed5
  user :: Control.Lens.Type.Lens' Main.Transaction GHC.Base.String
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><S,1*U(U,U,U,U,U,U,U,U)>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ (f :: * -> *)
                   ($dFunctor :: GHC.Base.Functor f)
                   (f1 :: GHC.Base.String -> f GHC.Base.String)
                   (ds :: Main.Transaction) ->
                 case ds of wild { Main.Transaction x1 x2 x3 x4 x5 x6 x7 x8 ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ GHC.Base.String
                   @ Main.Transaction
                   (\ (y1 :: GHC.Base.String) ->
                    Main.Transaction x1 y1 x3 x4 x5 x6 x7 x8)
                   (f1 x2) }) -}
instance GHC.Classes.Eq [Main.Transaction] = Main.$fEqTransaction
instance GHC.Classes.Ord [Main.Transaction] = Main.$fOrdTransaction
instance GHC.Read.Read [Main.Transaction] = Main.$fReadTransaction
instance GHC.Show.Show [Main.Transaction] = Main.$fShowTransaction
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

